<h1>About</h1>
<p><a href="https://github.com/mdecd2023/2b2-pj2bg1">倉儲</a> <a href="https://mdecd2023.github.io/2b2-pj2bg1/content/index.html">網站</a></p>
<p><a href="https://mde.tw/pjcopsim">https://mde.tw/pjcopsim</a></p>
<p>40723217 nfu40723217</p>
<p>40923219 nfu<span>40923219</span></p>
<p>40923225 nfu40923225@nfu.edu.tw</p>
<p>40923246 40923246</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Jz39RTQherg" title="YouTube video player" width="560"></iframe></p>
<h1>group</h1>
<h1>pj2</h1>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/4IurfQP8U1Q" title="YouTube video player" width="560"></iframe></p>
<p><a href="/downloads/zmq_bubbleRob_red_green_board.ttt">瀏覽器中計分板設計.ttt檔</a></p>
<hr/>
<p>分工情況:</p>
<p>40723217：<span>虛擬主機連線，</span>進球、位置重置程式設計</p>
<p>40923219：記分板程式修改、影片，<span>報告</span></p>
<p>40923225：場景球場繪製，虛擬主機連線，報告</p>
<p>40923246：場景記分板繪製﹐記分板程式設計</p>
<p>場景</p>
<p>在solidworks繪製</p>
<p><img alt="" height="326" src="/images/W13-場景.png" width="660"/></p>
<p><a href="/downloads/01111.STL">場景.STL檔</a></p>
<p>記分板</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/mhgDF8kXEXE" title="YouTube video player" width="560"></iframe></p>
<p>使用<strong>CoppeliaSim</strong>繪製記分板</p>
<p><img alt="" height="309" src="/images/W13-記分板尺寸.png" width="561"/></p>
<p><span><a href="/downloads/board_test.ttt">記分板.ttt檔</a></span></p>
<p><span>程式</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
bubbleRob1 = sim.getObject('./bubbleRob1')
bubbleRob2 = sim.getObject('./bubbleRob2')
sensor = sim.getObject('./sensor')
sensor2 = sim.getObject('./sensor2')
ball = sim.getObject('./ball')

pos1 = {-1,0,0.15}
pos2 = {1,0,0.15}
posS = {0,0,0.15}
ang1 = {0,0,0}
ang2 = {0,0,3.14}
bubbleRobBase = 4
initialBubbleRobPosition = sim.getObjectPosition(bubbleRobBase, -1)
initialBubbleRobOrientation = sim.getObjectOrientation(bubbleRobBase, -1)
initialballPosition = sim.getObjectPosition(ball, -1)
initialballOrientation = sim.getObjectOrientation(ball, -1)

count = 14400
score1 = 0
score2 = 0
score3 = 0
score4 = 0

s0={1,1,1,1,1,0,1}
s1={0,0,1,1,0,0,0}
s2={0,1,1,0,1,1,1}
s3={0,0,1,1,1,1,1}
s4={1,0,1,1,0,1,0}
s5={1,0,0,1,1,1,1}
s6={1,1,0,1,1,1,1}
s7={0,0,1,1,1,0,0}
s8={1,1,1,1,1,1,1}
s9={1,0,1,1,1,1,1}
s={s0,s1,s2,s3,s4,s5,s6,s7,s8,s9}
for j = 0,6,1 do
a = sim.getObject('./_G['..j..']')
if (s[1][j+1]==1) then
sim.setShapeColor(a, nil, sim.colorcomponent_ambient_diffuse, {1, 0, 0})
else
sim.setShapeColor(a, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end
for j = 0,6,1 do
b = sim.getObject('./G_['..j..']')
if (s[1][j+1]==1) then
sim.setShapeColor(b, nil, sim.colorcomponent_ambient_diffuse, {1, 0, 0})
else
sim.setShapeColor(b, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end
for j = 0,6,1 do
d = sim.getObject('./_R['..j..']')
if (s[1][j+1]==1) then
sim.setShapeColor(d, nil, sim.colorcomponent_ambient_diffuse, {0, 1, 0})
else
sim.setShapeColor(d, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end
for j = 0,6,1 do
c = sim.getObject('./R_['..j..']')
if (s[1][j+1]==1) then
sim.setShapeColor(c, nil, sim.colorcomponent_ambient_diffuse, {0, 1, 0})
else
sim.setShapeColor(c, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end
end
function sysCall_actuation()
result = sim.readProximitySensor(sensor)
print(s[i])
if(result&gt;0)then
sim.setObjectPosition(ball, -1, initialballPosition)
sim.setObjectOrientation(ball, -1, initialballOrientation)
sim.setObjectPosition(bubbleRob1, -1, pos1)
sim.setObjectPosition(bubbleRob2, -1, pos2)
sim.setObjectOrientation(bubbleRob1, -1, ang1)
sim.setObjectOrientation(bubbleRob2, -1, ang2)
score1 = score1 + 1
if (score1 &lt;= 9) then
i = score1 +1

for j = 0, 6, 1 do
a = sim.getObject('./_G['..j..']')
if (s[i][j+1] == 1) then
sim.setShapeColor(a, nil, sim.colorcomponent_ambient_diffuse, {1, 0, 0})
else
sim.setShapeColor(a, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end


elseif (score1 &gt; 9 and score2&lt;=9) then
score1 = 0
for j = 0, 6, 1 do
a = sim.getObject('./_G['..j..']')
if (s[1][j+1] == 1) then
sim.setShapeColor(a, nil, sim.colorcomponent_ambient_diffuse, {1, 0, 0})
else
sim.setShapeColor(a, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end

score2 = score2 + 1
i = score2 +1

for j = 0, 6, 1 do
b = sim.getObject('./G_['..j..']')
if (s[i][j+1] == 1) then
sim.setShapeColor(b, nil, sim.colorcomponent_ambient_diffuse, {1, 0, 0})
else
sim.setShapeColor(b, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end


else
sim.pauseSimulation()
end
end
result2 = sim.readProximitySensor(sensor2)
if(result2&gt;0)then
sim.setObjectPosition(ball, -1, initialballPosition)
sim.setObjectOrientation(ball, -1, initialballOrientation)
sim.setObjectPosition(bubbleRob1, -1, pos1)
sim.setObjectPosition(bubbleRob2, -1, pos2)
sim.setObjectOrientation(bubbleRob1, -1, ang1)
sim.setObjectOrientation(bubbleRob2, -1, ang2)
score3 = score3 + 1

if (score3 &lt;= 9) then
i = score3 +1
for j = 0, 6, 1 do
c = sim.getObject('./_R['..j..']')
if (s[i][j+1] == 1) then
sim.setShapeColor(c, nil, sim.colorcomponent_ambient_diffuse, {0, 1, 0})
else
sim.setShapeColor(c, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end


elseif (score3 &gt; 9 and score4&lt;=9) then
score3 = 0
for j = 0, 6, 1 do
c = sim.getObject('./_R['..j..']')
if (s[1][j+1] == 1) then
sim.setShapeColor(c, nil, sim.colorcomponent_ambient_diffuse, {0, 1, 0})
else
sim.setShapeColor(c, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end
score4 = score4 + 1

i = score4 +1
for j = 0, 6, 1 do
d = sim.getObject('./R_['..j..']')
if (s[i][j+1] == 1) then
sim.setShapeColor(d, nil, sim.colorcomponent_ambient_diffuse, {0, 1, 0})
else
sim.setShapeColor(d, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end
else
sim.pauseSimulation()
end
end
end
</pre>
<hr/>
<p>問題區</p>
<p>5/5加入第一版記分板</p>
<p>問題1:第一版記分板顯示異常，每次進球後記分板，只會閃爍一格。</p>
<p>問題2:車子進球門，也會計分。</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/QQ8k-o1Lhpc" title="YouTube video player" width="560"></iframe></p>
<p>5/11第二版記分板</p>
<p>解決問題:第二版改善了第一版的顯示異常，能夠正常做動。</p>
<p>保留問題:車子與球進球會計分，還沒改善。</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/QigwOlBsaVw" title="YouTube video player" width="560"></iframe></p>
<h2>補充</h2>
<p>記分板設計位置</p>
<p>板子</p>
<p><img alt="" height="295" src="/images/W13-記分板尺寸-.png" width="447"/></p>
<p>七段顯示1</p>
<p><img alt="" height="290" src="/images/W13-記分板1.png" width="452"/></p>
<p><span>七段顯示2</span></p>
<p><img alt="" height="297" src="/images/W13-記分板2.png" width="452"/></p>
<p><span>七段顯示3</span></p>
<p><img alt="" height="307" src="/images/W13-記分板3.png" width="451"/></p>
<p><span>七段顯示4</span></p>
<p><img alt="" height="306" src="/images/W13-記分板4.png" width="450"/></p>
<p><span>七段顯示5</span></p>
<p><img alt="" height="295" src="/images/W13-記分板5.png" width="450"/></p>
<p><span>七段顯示6</span></p>
<p><img alt="" height="300" src="/images/W13-記分板6.png" width="449"/></p>
<p><span>七段顯示7</span></p>
<p><img alt="" height="310" src="/images/W13-記分板7.png" width="452"/></p>
<p>程式解釋</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
bubbleRob1 = sim.getObject('./bubbleRob1')
bubbleRob2 = sim.getObject('./bubbleRob2')
sensor = sim.getObject('./sensor')
sensor2 = sim.getObject('./sensor2')
ball = sim.getObject('./ball')

pos1 = {-1,0,0.15}
pos2 = {1,0,0.15}
posS = {0,0,0.15}
ang1 = {0,0,0}
ang2 = {0,0,3.14}
bubbleRobBase = 4
initialBubbleRobPosition = sim.getObjectPosition(bubbleRobBase, -1)
initialBubbleRobOrientation = sim.getObjectOrientation(bubbleRobBase, -1)
initialballPosition = sim.getObjectPosition(ball, -1)
initialballOrientation = sim.getObjectOrientation(ball, -1)

count = 14400
score1 = 0
score2 = 0
score3 = 0
score4 = 0

s0={1,1,1,1,1,0,1}
s1={0,0,1,1,0,0,0}
s2={0,1,1,0,1,1,1}
s3={0,0,1,1,1,1,1}
s4={1,0,1,1,0,1,0}
s5={1,0,0,1,1,1,1}
s6={1,1,0,1,1,1,1}
s7={0,0,1,1,1,0,0}
s8={1,1,1,1,1,1,1}
s9={1,0,1,1,1,1,1}
s={s0,s1,s2,s3,s4,s5,s6,s7,s8,s9}
for j = 0,6,1 do
a = sim.getObject('./_G['..j..']')
if (s[1][j+1]==1) then
sim.setShapeColor(a, nil, sim.colorcomponent_ambient_diffuse, {1, 0, 0})
else
sim.setShapeColor(a, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end
for j = 0,6,1 do
b = sim.getObject('./G_['..j..']')
if (s[1][j+1]==1) then
sim.setShapeColor(b, nil, sim.colorcomponent_ambient_diffuse, {1, 0, 0})
else
sim.setShapeColor(b, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end
for j = 0,6,1 do
d = sim.getObject('./_R['..j..']')
if (s[1][j+1]==1) then
sim.setShapeColor(d, nil, sim.colorcomponent_ambient_diffuse, {0, 1, 0})
else
sim.setShapeColor(d, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end
for j = 0,6,1 do
c = sim.getObject('./R_['..j..']')
if (s[1][j+1]==1) then
sim.setShapeColor(c, nil, sim.colorcomponent_ambient_diffuse, {0, 1, 0})
else
sim.setShapeColor(c, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end
end
function sysCall_actuation()
result = sim.readProximitySensor(sensor)
print(s[i])
if(result&gt;0)then
sim.setObjectPosition(ball, -1, initialballPosition)
sim.setObjectOrientation(ball, -1, initialballOrientation)
sim.setObjectPosition(bubbleRob1, -1, pos1)
sim.setObjectPosition(bubbleRob2, -1, pos2)
sim.setObjectOrientation(bubbleRob1, -1, ang1)
sim.setObjectOrientation(bubbleRob2, -1, ang2)
score1 = score1 + 1
if (score1 &lt;= 9) then
i = score1 +1

for j = 0, 6, 1 do
a = sim.getObject('./_G['..j..']')
if (s[i][j+1] == 1) then
sim.setShapeColor(a, nil, sim.colorcomponent_ambient_diffuse, {1, 0, 0})
else
sim.setShapeColor(a, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end


elseif (score1 &gt; 9 and score2&lt;=9) then
score1 = 0
for j = 0, 6, 1 do
a = sim.getObject('./_G['..j..']')
if (s[1][j+1] == 1) then
sim.setShapeColor(a, nil, sim.colorcomponent_ambient_diffuse, {1, 0, 0})
else
sim.setShapeColor(a, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end

score2 = score2 + 1
i = score2 +1

for j = 0, 6, 1 do
b = sim.getObject('./G_['..j..']')
if (s[i][j+1] == 1) then
sim.setShapeColor(b, nil, sim.colorcomponent_ambient_diffuse, {1, 0, 0})
else
sim.setShapeColor(b, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end


else
sim.pauseSimulation()
end
end
result2 = sim.readProximitySensor(sensor2)
if(result2&gt;0)then
sim.setObjectPosition(ball, -1, initialballPosition)
sim.setObjectOrientation(ball, -1, initialballOrientation)
sim.setObjectPosition(bubbleRob1, -1, pos1)
sim.setObjectPosition(bubbleRob2, -1, pos2)
sim.setObjectOrientation(bubbleRob1, -1, ang1)
sim.setObjectOrientation(bubbleRob2, -1, ang2)
score3 = score3 + 1

if (score3 &lt;= 9) then
i = score3 +1
for j = 0, 6, 1 do
c = sim.getObject('./_R['..j..']')
if (s[i][j+1] == 1) then
sim.setShapeColor(c, nil, sim.colorcomponent_ambient_diffuse, {0, 1, 0})
else
sim.setShapeColor(c, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end


elseif (score3 &gt; 9 and score4&lt;=9) then
score3 = 0
for j = 0, 6, 1 do
c = sim.getObject('./_R['..j..']')
if (s[1][j+1] == 1) then
sim.setShapeColor(c, nil, sim.colorcomponent_ambient_diffuse, {0, 1, 0})
else
sim.setShapeColor(c, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end
score4 = score4 + 1

i = score4 +1
for j = 0, 6, 1 do
d = sim.getObject('./R_['..j..']')
if (s[i][j+1] == 1) then
sim.setShapeColor(d, nil, sim.colorcomponent_ambient_diffuse, {0, 1, 0})
else
sim.setShapeColor(d, nil, sim.colorcomponent_ambient_diffuse, {1, 1, 1})
end
end
else
sim.pauseSimulation()
end
end
end
</pre>
<h1>w9</h1>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/5jE7ENssbcY" title="YouTube video player" width="560"></iframe>1</p>
<h2>40723217-w9</h2>
<p>今日我使用了chatgpt幫助我解決了操作上的問題，以下是我所有解決chatgpt的總整理:</p>
<p dir="auto">Q:我在Scite上遇到了"系統找不到指定的檔案。" 但我不清楚是甚麼原因，能列舉可能的原因嗎?</p>
<p dir="auto">A:"系統找不到指定的檔案" 是一個錯誤訊息，通常代表了一個檔案或路徑並不存在或無法被找到。以下是可能導致這個錯誤的原因：</p>
<p dir="auto">1.檔案或路徑不存在：這是最常見的原因，檔案或路徑可能已被刪除、移動或更改名稱。<br/>2.權限不足：如果您不擁有足夠的權限來訪問該檔案或路徑，系統就會報告此錯誤。<br/>3.檔案或路徑正在使用中：如果檔案或路徑正在被其他程式使用，例如正在被其他程式打開，您就無法訪問它。<br/>4.磁碟問題：如果您的硬碟遇到了問題，例如壞道或損壞，也可能會導致系統找不到指定的檔案。<br/>5.程式錯誤：有時候程式本身也可能導致這個錯誤，可能是因為程式中存在錯誤或不正確的路徑設置。</p>
<p dir="auto">建議您檢查檔案路徑是否正確，確認您有足夠的權限來訪問檔案，並關閉其他正在使用檔案的程式。如果問題仍然存在，您可以嘗試重新啟動您的電腦，或檢查您的硬碟是否存在問題。</p>
<p dir="auto">Q:那麼在Scite的輸出欄位中出現"pyw -u 文件"代表著甚麼意思?</p>
<p dir="auto">A:在 Scite 的輸出欄位中出現 "pyw -u 文件" 代表著正在執行一個 Python 程式，其中：</p>
<p dir="auto">"pyw" 是 Python 的執行檔案名稱，通常用於執行 GUI 應用程式。<br/>"-u" 代表著執行 Python 程式時使用的參數，這裡 "-u" 是代表使用 unbuffered I/O（無緩衝輸入輸出）。<br/>"文件" 是指正在執行的 Python 程式的檔案名稱。<br/>因此，"pyw -u 文件" 意味著 Scite 正在使用 Python 執行檔案執行指定的 Python 程式檔案，並使用 unbuffered I/O 參數。</p>
<p dir="auto">Q:那麼如果Scite執行了這個檔案中的代碼，並出現找不到指定檔案，你認為會是哪種問題?</p>
<p dir="auto">A:如果在 Scite 中執行 Python 程式時出現 "系統找不到指定的檔案" 的錯誤訊息，通常代表著程式中的某個檔案無法被找到，可能是以下原因之一：</p>
<p dir="auto">1.路徑不正確：程式中指定的路徑可能是不正確的，例如路徑名稱有誤、縮寫或空格使用不當等。<br/>2.檔案不存在：程式中指定的檔案可能不存在，例如該檔案被刪除或被移動到了其他地方。<br/>3.權限不足：程式無法訪問該檔案，可能是因為權限不足或該檔案被鎖定而無法被訪問。<br/>4.檔案正在被其他程式使用：可能是因為該檔案正在被其他程式使用而無法被訪問。</p>
<p dir="auto">如果程式中指定的檔案名稱和路徑都是正確的，可以檢查一下該檔案是否存在，並且您是否擁有足夠的權限來訪問該檔案。如果該檔案存在，請確保該檔案沒有被其他程式鎖定。另外，您也可以嘗試使用絕對路徑或相對路徑指定檔案的位置，以確保程式可以正確找到該檔案。</p>
<p dir="auto">Q:我沒有移動檔案，單純只是在Scite的上輸入python代碼 print("hi") ，然後儲存在Scite的根目錄上，卻還是發生上述問題，該如何解決?</p>
<p dir="auto">A:如果您在 Scite 的根目錄中建立一個 Python 檔案，並在該檔案中加入 print("hi") 代碼，然後在 Scite 中運行該檔案時出現了 "系統找不到指定的檔案" 的錯誤，這可能是因為 Scite 沒有正確設置當前工作目錄。</p>
<p dir="auto">請確保您正在使用的 Scite 版本支援當前工作目錄設置，並且您已經正確地設置了當前工作目錄。您可以在 Scite 中通過點擊 "Options" 菜單中的 "Open User Options File" 來編輯 Scite 的用戶設置文件，然後添加以下行：</p>
<div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">cwd=$(FilePath)</pre>
<p dir="auto">這個設置將當前工作目錄設置為當前打開的檔案所在的目錄。這樣，當您運行 Python 程式時，Python 將會在當前工作目錄中搜索檔案，而不是在 Scite 的根目錄中搜索檔案，從而避免 "系統找不到指定的檔案" 的錯誤。</p>
<p dir="auto">Q:我已經嘗試加入了以上代碼<br/>目前我的環境如下(以基本目錄為Y硬碟):<br/>Y:\wscite 為Scite目錄<br/>Y:\Python310 為python3.10.0目錄<br/>而python代碼 print("hi") 儲存名稱為 test.py 並儲存在scite目錄下<br/>但依舊出現同樣的問題，該如何解決?</p>
<p dir="auto">A:如果您已經在 Scite 的用戶設置文件中設置了當前工作目錄，但仍然出現 "系統找不到指定的檔案" 的錯誤，您可以試試以下解決方案：<br/>1.確保 Python 已經安裝並設置好環境變數：請確保 Python 已經成功安裝在您的電腦上，並且已經設置好環境變數，以便您可以在命令提示符號或 Scite 中運行 Python 程式。<br/>2.檢查 Scite 設置：請確保 Scite 的設置正確，例如編譯器路徑、Python 版本等。<br/>3.檢查 Python 程式碼：請確保您的 Python 程式碼沒有錯誤，例如語法錯誤或拼寫錯誤等。<br/>4.嘗試使用絕對路徑：請嘗試使用絕對路徑指定 Python 程式碼所在的位置，以確保 Scite 可以正確找到該檔案。例如，在 Scite 中使用以下代碼來執行您的 Python 程式碼：</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os os.system("Y:/wscite/Python310/python.exe Y:/wscite/test.py")</pre>
<p dir="auto">這個代碼將 Python 程式碼 test.py 所在的絕對路徑傳遞給 Python 解釋器，從而避免了 "系統找不到指定的檔案" 的錯誤。<br/>如果以上方法仍然無法解決問題，您可以嘗試重新安裝 Scite 和 Python，或者嘗試使用其他的程式碼編輯器來編輯和運行 Python 程式碼。</p>
<p dir="auto">Q:我發現它輸入此程式碼後跳亂碼了......</p>
<p dir="auto">A:如果您在 Scite 中輸入 Python 程式碼後出現亂碼，可能是因為 Scite 的編碼格式與您的 Python 程式碼的編碼格式不一致所導致的。<br/>您可以嘗試以下方法解決問題：<br/>設置 Scite 的編碼格式：打開 Scite，從菜單欄選擇「選項」 &gt;「編輯器設置」 &gt;「默認編碼」，選擇與您的 Python 程式碼相同的編碼格式。<br/>轉換 Python 程式碼的編碼格式：使用一些編輯器工具（例如 Notepad++）將您的 Python 程式碼轉換為 Scite 使用的編碼格式，以確保 Scite 正確顯示您的程式碼。<br/>在程式碼中添加編碼宣告：在 Python 程式碼的開頭添加一行編碼宣告，例如：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"># -*- coding: utf-8 -*-</pre>
<p dir="auto">這個宣告將告訴 Python 程式碼的解釋器使用 UTF-8 編碼格式來解讀程式碼。<br/>希望以上方法能夠幫助您解決問題。</p>
<p dir="auto">Q:在運行 import os<br/>os.system("Y:/wscite/Python310/python.exe Y:/wscite/test.py")<br/>程式碼後，問題依舊是找不到指定的檔案<br/>要不然試著一個個排除吧</p>
<p dir="auto">在那之後就是一大段的排除錯誤。</p>
<p dir="auto">當我進行到半個鐘頭後，也步入了正軌。</p>
<p>接著我便遇到了<span>&gt;python3 -u test.py &gt;Exit code: 9009 的問題，繼續使用chatgpt解決問題。</span></p>
<p><span>A:</span>錯誤代碼9009通常表示找不到可執行的命令。在這種情況下，可能是由於系統環境變數中的路徑未設置正確所致。</p>
<p>您可以嘗試檢查系統環境變數，並確保Python的路徑已經被添加到Path變數中。如果沒有，請將Python的安裝路徑添加到Path中。在Windows上，您可以這樣做：</p>
<ol>
<li>開啟「控制台」並點擊「系統」</li>
<li>點擊「進階系統設置」</li>
<li>在「環境變數」下找到「Path」並點擊「編輯」</li>
<li>在新的窗口中，點擊「新增」，並添加Python的安裝路徑（例如：C:\Python310）</li>
<li>點擊「確定」，保存所有更改</li>
</ol>
<p>完成後，關閉Scite並重新打開，然後再次嘗試運行您的Python代碼，看看問題是否已經解決了。</p>
<p>Q:<span>我將環境變數的「path」已經添加了Y:\Python310作為路徑，但問題依舊沒有解決，該如何是好?</span></p>
<p>A:如果已經設置好環境變數，而且路徑中已經包含了 Python 的安裝路徑，那麼可能問題出現在 Scite 的設置中。請再次檢查 Scite 的設置，確保以下兩點：</p>
<ol>
<li>
<p>編譯器路徑：在 Scite 中選擇「選項」&gt;「編譯器設置」，確認 Python 的執行檔路徑是否正確設置為 Y:\Python310\python.exe。如果路徑不正確，請修改為正確的路徑。</p>
</li>
<li>
<p>Python 版本：同樣在「編譯器設置」中，確認所選擇的 Python 版本是否與安裝在電腦上的版本相對應。如果版本不對應，請選擇正確的版本。</p>
</li>
</ol>
<p>如果以上兩點都確認無誤，那麼可能是 Scite 的某些設置或者系統環境的問題，這時可以考慮卸載 Scite 並重新安裝，或者嘗試在其他電腦上運行相同的代碼，檢查是否存在相同的問題。</p>
<p>Q:<span>如果我想為Scite正確設置python路徑，我該如何在 Open User Options 中添加「Y:\Python310\python.exe」路徑?</span></p>
<p><span>並且我的 Open User Options 是一片空白，只有你方才要我添加的</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># This is an example SciTE properties file with a couple of settings
# that show how to configure SciTE to work with Python.
 
# Define the location of the Python executable.
command.go.*.py=python3 -u $(FileNameExt)
 
# Enable the Python lexer.
lexer.$(file.patterns.py)=python
 
# Set the encoding for Python source code files.
code.page=65001</pre>
<p><span>這樣仍然不足，那請問是要修哪邊?</span></p>
<p>A:<span>如果你的 Open User Options 中只有上述內容，那麼可以手動添加以下內容來指定 Python 路徑：</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Define the location of the Python executable.
command.go.*.py=python Y:/wscite/Python310/python.exe "$(FilePath)"</pre>
<p><span>請將上述內容添加至 Open User Options，然後保存並重新啟動 Scite。之後嘗試運行你的 Python 程式，看看是否能夠正常執行。</span></p>
<p><span>Q:「Y:/wscite/Python310/python.exe "$(FilePath)"」是指我安裝python310的路徑嗎?</span></p>
<p><span>A:是的，这里的路径指的是你安装 Python 3.10 的路径。如果你安装的 Python 版本不是 3.10，那么你需要将路径中的 "Python310" 替换为你安装的 Python 版本号。</span></p>
<p><span>Q:但我的路徑是「Y:\Python310\python.exe」 而我的Scite路徑則是「Y:\wscite\sciTE.exe」 請修正一下上方代碼</span></p>
<p><span>A:非常抱歉，我打錯了，下面是正確的代碼：</span></p>
<div>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">command.go.*.py=Y:/Python310/python.exe "$(FilePath)"</pre>
<p><span>請注意反斜線改成斜線，並且路徑前加上磁盤標記Y:，如此一來，Scite就能夠找到Python的路徑了。</span></p>
<p><span>我終於讓我的Scite找到路徑了！終於能夠啟動.py檔案了</span></p>
<p><span>到了這裡，終於不再出現9009錯誤，我也得以啟動py檔案。</span></p>
<p><span>Q:下一個問題是在python程式中，import keyboard應該是意旨匯入"鍵盤"的函式，我的理解有誤嗎?</span></p>
<p><span>A:你的理解有一點小錯誤，<code>keyboard</code><span><span> </span>模組並不是匯入整個鍵盤的函式，而是一個 Python 第三方庫，可以用來監聽和模擬按鍵事件。在使用<span> </span></span><code>keyboard</code><span><span> </span>模組時，通常會使用其中的<span> </span></span><code>on_press</code><span><span> </span>和<span> </span></span><code>on_release</code><span><span> </span>方法來註冊按鍵事件的處理函數，或者使用<span> </span></span><code>send</code><span><span> </span>方法來模擬按鍵事件。</span></span></p>
<p><span>Q:好，謝謝你讓我理解了。那麼 Traceback (most recent call last): File "Y:\CoppeliaSimEdu\newbing_bubbleRob\newbing_bubbleRob_remoteapi1.py", line 5, in &lt;module&gt; import keyboard ModuleNotFoundError: No module named 'keyboard'</span></p>
<p><span>的錯誤而言，是代表著不存在這個第三方庫?</span></p>
<p><span>A:是的，這個錯誤提示意味著在你的 Python 環境中沒有安裝<span> </span><code>keyboard</code><span><span> </span>這個第三方庫。你需要先安裝這個庫才能在你的 Python 程式中使用它。你可以使用<span> </span></span><code>pip</code><span><span> </span>來安裝這個庫，請在終端機中輸入以下指令：</span></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">pip install keyboard</pre>
<p><span>安裝完成後，你應該就可以在你的 Python 程式中成功匯入 </span><code>keyboard</code><span> 了。</span></p>
<p><span>Q:但我出現了 Fatal error in launcher: Unable to create process using '"F:\senior\mde2022\portable_python_3.10.6\Python310\python.exe" "y:\Python310\Scripts\pip.exe" install keyboard': ??????????? 這個問題...... 等等，這個F;\的路徑很奇怪，我想我得修復它 我的y槽路徑實際上是使用可攜帶系統虛擬的，路徑是"F:\3down\wcm2023\python311_w1_cd2023_cmsimde\data" 我該如何將上述路徑導正?</span></p>
<p><span>在這裡，我和chatgpt鬼打牆了，所以讓我們直接跳到正確方法。</span></p>
<p><span>A:這個錯誤提示說在執行命令<span> </span><code>"F:\senior\mde2022\portable_python_3.10.6\Python310\python.exe" "y:\Python310\Scripts\pip.exe" install keyboard</code><span><span> </span>時遇到了致命錯誤。具體原因可能有很多，但是根據你之前的描述，你使用的 Python 程序並非安裝在<span> </span></span><code>F:\senior\mde2022\portable_python_3.10.6\Python310\</code><span><span> </span>目錄下，而是安裝在<span> </span></span><code>F:\3down\wcm2023\python311_w1_cd2023_cmsimde\data\Python310\</code><span><span> </span>目錄下。因此，如果你想安裝<span> </span></span><code>keyboard</code><span><span> </span>模塊，你需要在命令行中使用正確的 Python 程序路徑和 pip 工具路徑。以下是可能適用於你的命令：</span></span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">F:\3down\wcm2023\python311_w1_cd2023_cmsimde\data\Python310\python.exe -m pip install keyboard</pre>
<p><span>這個命令使用了正確的 Python 程序路徑和 pip 工具路徑，它將 </span><code>keyboard</code><span> 模塊安裝在你的 Python 環境中。請注意，你需要在命令行中切換到包含上述 Python 程序的目錄中才能運行此命令。</span></p>
<p><span></span></p>
<p><span>最終，我的BubbleRob終於得以運行。</span></p>
<p><span></span></p>
</div>
<iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/5jE7ENssbcY" title="YouTube video player" width="560"></iframe></div>
<h2>40923219-w9</h2>
<p>連跑範例都出bug我真的不解<br/>想import 模組一直找不到，跑安裝又說有<br/>組長說可能是路徑的問題，之後看他是怎麼設定的吧<br/>我自己瞎找已經行不通了</p>
<p>終於解決了路徑問題</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/My1TRX6WBEQ" width="560"></iframe></p>
<h2>40923225-w9</h2>
<p>今天試著嘗試多人操控自走車，目前先試試兩台，之後再慢慢增加。</p>
<p>不得不說，真的很有趣。</p>
<p>雖然過程很讓我感到挫折，但還是會慢慢跟上其他人的腳步。</p>
<h2>40923246-w9</h2>
<p>今天交給我們的新模擬，用兩個py控制兩台車</p>
<p>控制紅色那台可以正常運作</p>
<p><img alt="" height="464" src="/images/W9-R.png" width="526"/></p>
<p>但我控制綠色那台時一直跑出 找不到__main__</p>
<p><img alt="" height="414" src="/images/W9-G.png" width="532"/></p>
<p>問chatgpt 都是回python路徑問題</p>
<p><img alt="" height="358" src="/images/W9-gpt.png" width="525"/></p>
<p>嘗試用了討論區的解法，也是一樣找不到__main__</p>
<p><img alt="" height="384" src="/images/W9-17.png" width="529"/></p>
<p><img alt="" height="737" src="/images/W9-scite.png" width="545"/></p>
<p>但使用python開啟則可以運作</p>
<p><img alt="" height="296" src="/images/W9-py-1.png" width="548"/></p>
<p><img alt="" height="301" src="/images/W9-py-2.png" width="735"/></p>
<p><img alt="" height="338" src="/images/W9-py-3.png" width="599"/></p>
<h1>w10</h1>
<p>1.What is zmqRemoteAPI, and how does it relate to CoppeliaSim?</p>
<blockquote>
<p>40923219號回答:</p>
<p>zmq是提供遠端連接的函式庫，可以運用在CoppeliaSim中。</p>
</blockquote>
<p>2.How do you establish a connection between a Python script and CoppeliaSim using zmqRemoteAPI?</p>
<blockquote>
<p>40723217使用chatgpt回答:</p>
<p>使用zmqRemoteAPI建立Python腳本和CoppeliaSim之間的連接，可以按照以下步驟進行操作：</p>
<p>1.在CoppeliaSim中啟用遠程API服務：在CoppeliaSim中的選單中選擇File -&gt; Open Scene，然後選擇一個場景檔案。接著，在CoppeliaSim的選單中選擇Remote API -&gt; Enable remote API，確保選項已勾選。</p>
<p>2.在Python中安裝zmq和zmqRemoteAPI：在終端機中輸入以下指令安裝zmq和zmqRemoteAPI：pip install pyzmq 和 pip install zmqRemoteAPI</p>
<p>3.在Python中建立遠程連接：在Python腳本中加入以下程式碼，建立一個遠程連接。</p>
</blockquote>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import zmq
import time

# 定義遠程API端口號
port = 19997

# 建立遠程連接
context = zmq.Context()
socket = context.socket(zmq.REQ)
socket.connect("tcp://127.0.0.1:%s" % port)

# 測試連接是否成功
socket.send_string("Hello")
message = socket.recv_string()
print("Received reply:", message)</pre>
<blockquote>
<p>4.使用遠程API進行操作：建立遠程連接後，就可以使用zmqRemoteAPI中提供的函數進行CoppeliaSim的操作了。例如，以下程式碼可以在CoppeliaSim中顯示一個對話框。</p>
</blockquote>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 使用遠程API顯示一個對話框
socket.send_string("simDisplayDialog('Hello from Python!', sim_dlgstyle_message, true)")
message = socket.recv_string()
print("Received reply:", message)</pre>
<p>3. What are some common use cases for zmqRemoteAPI in CoppeliaSim?</p>
<blockquote>
<p>40923246號回答:</p>
<p>遠程控制模組、在外部應用程式之間交換數據、可視化顯示模組控制數據、自動化測試和驗證模組。</p>
</blockquote>
<p>4.What are the advantages and disadvantages of using zmqRemoteAPI compared to other methods of communication between Python and CoppeliaSim?</p>
<blockquote>
<p>40923219號回答:</p>
<p>CoppliaSim 跟zmqRemoteAPI都是免費的且安全，我上網查詢zmq的優點查到的都是方便使用，但是我至今操作上仍有很大的困難，這應該算缺點(雖然感覺像是我的缺點而不是zmq的)</p>
</blockquote>
<p>5.Can you give an example of a project or task that you could complete using zmqRemoteAPI in CoppeliaSim?</p>
<blockquote>
<p>40723217使用chatgpt回答:</p>
<p><span>以上就是使用zmqRemoteAPI建立Python腳本和CoppeliaSim之間連接的步驟。</span></p>
<p>使用zmqRemoteAPI在CoppeliaSim中可以完成許多項目或任務，例如：</p>
<p>控制機械臂：您可以使用zmqRemoteAPI控制CoppeliaSim中的機械臂模型，讓其執行各種動作，例如拾取和放置物品。</p>
<p>仿真感測器：您可以使用zmqRemoteAPI模擬各種感測器，例如相機、激光雷達、超聲波傳感器等，並且從CoppeliaSim中獲取感測器數據。</p>
<p>自主移動機器人：您可以使用zmqRemoteAPI控制移動機器人模型，讓其在CoppeliaSim中自主移動和避障，並且實時獲取位置和速度數據。</p>
<p>建立智能系統：您可以使用zmqRemoteAPI將CoppeliaSim中的多個模型和感測器組合起來，建立一個智能系統，例如自動駕駛系統、智能物流系統等。</p>
<p>總的來說，zmqRemoteAPI可以讓您在CoppeliaSim中執行各種複雜的任務，並且實時獲取模擬結果，這對於機器人開發和智能系統設計非常有幫助。</p>
<p><span></span>最後，解決問題的方法:</p>
<p>我要如何避免我和我的協同組員在同時更改github.com的小組倉儲時互相衝突?</p>
<p>在使用 Github 小組倉儲時，可以採用以下幾種方式避免互相衝突：</p>
<p>使用版本控制：當多個協同組員同時更改專案時，使用版本控制工具如 Git 可以讓每個協同組員在自己的本地環境中進行更改，然後再將更改推送到中央倉儲。這樣可以避免不同協同組員之間的更改互相干擾。</p>
<p>分支管理：在使用版本控制工具時，可以為不同協同組員分配不同的分支，這樣每個協同組員可以在自己的分支上進行更改，然後再將更改合併到主分支中。這樣可以避免不同協同組員之間的更改衝突。</p>
<p>建立溝通渠道：在進行協同開發時，建立良好的溝通渠道非常重要。協同組員應該定期進行會議或討論，確保大家在專案的目標、進度和工作分配等方面都有清晰的了解。如果有不明確的地方，協同組員應該及時溝通，以避免互相衝突。</p>
<p>定期更新倉儲：在進行協同開發時，每個協同組員都應該定期更新倉儲，以確保自己的本地代碼與中央倉儲保持同步。這樣可以避免由於版本不一致而導致的互相衝突。</p>
<p>--------------</p>
</blockquote>
<p><span>40723217：除錯可攜、撰寫程式。</span></p>
<p><span>40923219：討論及修改程式。</span></p>
<p><span>40923225：場景繪製、討論及測試程式。</span></p>
<p><span>40923246：討論及查詢程式。</span></p>
<p></p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://raw.githubusercontent.com/mdecd2023/2b2-pj2bg1/main/downloads/w10.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://raw.githubusercontent.com/mdecd2023/2b2-pj2bg1/main/downloads/w10.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<div></div>
<h2>40723217-W10</h2>
<p>我在4/25嘗試為我的red-green-bubbleRob添加了記分板、球場等內容，製作這些使用了第十組所製作的感測器與其他內容，並且使用了chatgpt去建構感測器中的lua指令，使感測器可以檢測物體並將球場重製與加分。</p>
<p>這裡是chatgpt的內容問答:</p>
<p><span>Q:coppeliasim 可以用lua程式操控物體的世界座標嗎? </span></p>
<p><span>A:是的，您可以使用Lua脚本在CoppeliaSim中控制对象的世界坐标。 在CoppeliaSim中，您可以使用Lua脚本编写控制代码，以控制模型和仿真环境中的各种对象。通过编写Lua脚本，您可以访问对象的位置、旋转和缩放信息，并使用Lua脚本将对象移动到所需的位置。 例如，您可以使用以下代码将对象移动到世界坐标(x,y,z)： pos = {x,y,z} sim.setObjectPosition(objectHandle, -1, pos) 其中，objectHandle是对象的句柄，pos是一个包含x、y、z坐标的Lua表。sim.setObjectPosition函数将对象移动到指定的位置。</span></p>
<p><span>Q:coppeliasim 可以用lua程式操控物體的世界角度嗎?</span></p>
<p><span>A:是的，您可以使用Lua脚本在CoppeliaSim中控制对象的世界角度。 在CoppeliaSim中，您可以使用Lua脚本编写控制代码，以控制模型和仿真环境中的各种对象。通过编写Lua脚本，您可以访问对象的旋转信息，并使用Lua脚本将对象旋转到所需的角度。 例如，您可以使用以下代码将对象绕着Z轴旋转angle弧度： ang = {0,0,angle} sim.setObjectOrientation(objectHandle, -1, ang) 其中，objectHandle是对象的句柄，ang是一个包含绕x、y、z轴旋转的角度的Lua表。sim.setObjectOrientation函数将对象旋转到指定的角度。您可以根据需要修改ang表中的值来控制对象的旋转。</span></p>
<p><span>Q:接著我將感測器的程式改寫如下:</span></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    sensor = sim.getObject('./sensor')
    sensor2 = sim.getObject('./sensor2')
    bubbleRob1 = sim.getObject('./bubbleRob1')
    bubbleRob2 = sim.getObject('./bubbleRob2')
    Sphere = sim.getObject('./ball')
    pos1 = {-1,0,0.15}
    pos2 = {1,0,0.15}
    posS = {0,0,0.15}
    ang1 = {0,0,0}
    ang2 = {0,0,3.14}
    bubbleRobBase = 4
    ball = sim.getObject('./ball')
    initialBubbleRobPosition = sim.getObjectPosition(bubbleRobBase, -1)
    initialBubbleRobOrientation = sim.getObjectOrientation(bubbleRobBase, -1)
    initialballPosition = sim.getObjectPosition(ball, -1)
    initialballOrientation = sim.getObjectOrientation(ball, -1)
    -- do some initialization here
    count = 9000
    score1 = 0
    score2 = 0
    xml = [[
        &lt;ui closeable="false" resizeable="false" activate="false"&gt;
            &lt;label text="0" style="* {background-color: #595; color: #000; font-size: 64px; font-weight: bold; padding: 4px; border-radius: 4px;}" id="10"/&gt;
            &lt;label text="0" style="* {background-color: #A00; color: #FFF; font-size: 64px; font-weight: bold; padding: 4px; border-radius: 4px;}" id="20"/&gt;
            &lt;label text="0" style="* {background-color: #00A; color: #FFF; font-size: 64px; font-weight: bold; padding: 4px; border-radius: 4px;}" id="30"/&gt;
        &lt;/ui&gt;
    ]] --
    ui = simUI.create(xml)
    simUI.setPosition(ui, 0,0, true)
end
function sysCall_actuation()
    result=sim.readProximitySensor(sensor)
    result2=sim.readProximitySensor(sensor2)
    -- 0 or 1
    if(result&gt;0)then
        --sim.stopSimulation()
        sim.setObjectPosition(bubbleRobBase, -1, initialBubbleRobPosition)
        sim.setObjectOrientation(bubbleRobBase, -1, initialBubbleRobOrientation)
        sim.setObjectPosition(ball, -1, initialballPosition)
        sim.setObjectOrientation(ball, -1, initialballOrientation)
        score1 = score1 +1 
        sim.setObjectPosition(bubbleRob1, -1, pos1)
        sim.setObjectPosition(bubbleRob2, -1, pos2)
        sim.setObjectPosition(Sphere, -1, posS)
        sim.setObjectOrientation(bubbleRob1, -1, ang1)
        sim.setObjectOrientation(bubbleRob2, -1, ang2)
    end
    if(result2&gt;0)then
        --sim.stopSimulation()
        sim.setObjectPosition(bubbleRobBase, -1, initialBubbleRobPosition)
        sim.setObjectOrientation(bubbleRobBase, -1, initialBubbleRobOrientation)
        sim.setObjectPosition(ball, -1, initialballPosition)
        sim.setObjectOrientation(ball, -1, initialballOrientation)
        score2 = score2 +1 
        sim.setObjectPosition(bubbleRob1, -1, pos1)
        sim.setObjectPosition(bubbleRob2, -1, pos2)
        sim.setObjectPosition(Sphere, -1, posS)
        sim.setObjectOrientation(bubbleRob1, -1, ang1)
        sim.setObjectOrientation(bubbleRob2, -1, ang2)
    end
    if count &gt; 0 then
        count = count - 1
        local minutes = math.floor(count / 60)
        local seconds = count % 60
        local timeStr = string.format("%d:%02d", minutes, seconds)
        simUI.setLabelText(ui, 10, timeStr)
        simUI.setLabelText(ui, 20, tostring(score1))
        simUI.setLabelText(ui, 30, tostring(score2))
    else
        sim.stopSimulation()
    end

end</pre>
<p></p>
<p><span></span></p>
<h1>w11</h1>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/5jE7ENssbcY" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/WO8Y3dJNZx8" title="YouTube video player" width="560"></iframe><img alt="" height="317" src="/images/W11-board.png" width="566"/></p>
<p><img alt="" height="325" src="/images/W11-board_test.png" width="559"/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/isvoPXaS-Hs" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/40923246_nfu_edu_tw/EbwaSVI5_ctIkvbdfPToUZsBC0zMi51I1Dz_h5E_dL1rZQ?e=CvUy6h">場地與記分板(內有測試用記分板)</a></p>
<h2>40723217-w11</h2>
<p><br/><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/WO8Y3dJNZx8" title="YouTube video player" width="560"></iframe></p>
<p><strong><span style="color: #ffff37;"><span style="background-color: #ae8f00;">我襙你的濫merge</span></span></strong></p>
<h2>40923225-w11</h2>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">自己另外製作場景與跟隊友討論程式碼的奧秘，嘗試連線的部分解結果還是沒辦法跟隊友一起連。</span></span></p>
<p><img alt="" height="539" src="/images/w0.png" width="953"/></p>
<p><img alt="" height="541" src="/images/w01.png" width="1000"/></p>
<h2>40923246-w11</h2>
<p>找到移動到絕對座標</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">pos = {x,y,z}
sim.setObjectPosition(objectHandle, -1, pos)</pre>
<p>跟移動到絕對角度</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">ang = {0,0,angle}
sim.setObjectOrientation(objectHandle, -1, ang)</pre>
<p>的程式</p>
<p>並且找出組員的球無法被sensor偵測的原因</p>
<p><img alt="" height="384" src="/images/W11-hi.png" width="544"/></p>
<p>其餘時間因為可攜一直出問題，又找不到問題只能靠組長幫忙</p>
<p>5/10 可攜依舊有問題，只能亂修(之前明明就有載模組，但每次重開模組就消失，這次想載也看不懂出錯在哪</p>
<p><img alt="" height="297" src="/images/W11-可攜又壞了.png" width="642"/></p>
<p></p>
<h1>w12</h1>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Jz39RTQherg" title="YouTube video player" width="560"></iframe></p>
<h1>Scenes</h1>
<p><iframe height="800" src="http://127.0.0.1:23020" width="600"></iframe></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h2>Brython_ex2</h2>
<p>This code uses the Euler method to approximate the solution to the ODE dy/dx = x - y with an initial condition of y0 = 1.0. The solution is calculated for a range of x values from 0 to 5.</p>
<p id="brython_div"></p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
<p>Solve ODE:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new paragraph element and set its text content to the solution
p = document.createElement('p')
p.textContent = f"The solution to the ODE is: {y}"

# Append the paragraph element to the body of the webpage
document.body.appendChild(p)</pre>
<p></p>
<p>
<script type="text/python3">
from browser import document, window

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new div element to hold the plot
#plot_div = document.createElement('div')
#plot_div.id = 'plot'
#document.body.appendChild(plot_div)
plot_div = document["brython_div"]

# Plot the solution using plotly.js
data = [{'x': x, 'y': y}]
window.Plotly.newPlot('brython_div', data)
</script>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</p>
<p>Brython environment and <a href="https://plotly.com/javascript/">Plotly.js</a>:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
// ]]&gt;&lt;/script&gt;
&lt;p id="brython_div"&gt;&lt;/p&gt;</pre>
<p>Brython programe with Plotly.js:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, window

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new div element to hold the plot
#plot_div = document.createElement('div')
#plot_div.id = 'plot'
#document.body.appendChild(plot_div)
plot_div = document["brython_div"]

# Plot the solution using plotly.js
data = [{'x': x, 'y': y}]
window.Plotly.newPlot('brython_div', data)</pre>
<p>This code defines a function dy_dx that represents the mass-spring-damper ordinary differential equation. The Euler method is used to solve this equation for a range of x values from 0 to 20 with initial conditions of y0 = [1.0, 0.0]. The solution is then plotted on the webpage using <a href="https://plotly.com/javascript/">plotly.js</a>.</p>
<p id="mass-spring-damper"></p>
<script type="text/python3">
from browser import document, window

m = 1.0  # mass
k = 1.0  # spring constant
c = 0.1  # damping coefficient

def dy_dx(y, x):
    y1, y2 = y
    return [y2, -(k/m)*y1 - (c/m)*y2]

x_start = 0
x_end = 20
n_points = 1000
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = [1.0, 0.0]
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y_new = [y[-1][j] + h * dy_dx(y[-1], x[i-1])[j] for j in range(2)]
    y.append(y_new)

# Create a new div element to hold the plot
'''
plot_div = document.createElement('div')
plot_div.id = 'plot'
document.body.appendChild(plot_div)
'''

# Plot the solution using plotly.js
data = [{'x': x, 'y': [y[i][0] for i in range(len(y))]}]
layout = {'title': 'Mass-Spring-Damper System', 'xaxis': {'title': 'Time'}, 'yaxis': {'title': 'Displacement'}}
window.Plotly.newPlot('mass-spring-damper', data, layout)
</script>
<p>This code defines a function dy_dx that represents the mass-spring-damper system with a PID controller. The gains of the PID controller are set to Kp = 10.0, Ki = 1.0, and Kd = 0.5. The Euler method is used to solve this system of equations for a range of x values from 0 to 20 with initial conditions of y0 = [0.0, 0.0, 0.0, 0.0]. The response of the system is then plotted on the webpage using <a href="https://plotly.com/javascript/">plotly.js</a>.</p>
<p id="pid-control"></p>
<script type="text/python3">
from browser import document, window

m = 1.0  # mass
k = 1.0  # spring constant
c = 0.1  # damping coefficient

Kp = 10.0  # proportional gain
Ki = 1.0   # integral gain
Kd = 0.5   # derivative gain

def dy_dx(y, x):
    y1, y2, e_int, e_prev = y
    e = 1 - y1
    de_dt = -y2
    u = Kp * e + Ki * e_int + Kd * de_dt
    return [y2, (u - k*y1 - c*y2)/m, e, e]

x_start = 0
x_end = 20
n_points = 1000
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = [0.0, 0.0, 0.0, 0.0]
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y_new = [y[-1][j] + h * dy_dx(y[-1], x[i-1])[j] for j in range(4)]
    y.append(y_new)

'''
# Create a new div element to hold the plot
plot_div = document.createElement('div')
plot_div.id = 'plot'
document.body.appendChild(plot_div)
'''

# Plot the solution using plotly.js
data = [{'x': x, 'y': [y[i][0] for i in range(len(y))], 'name': 'Output'},
        {'x': x, 'y': [1 for _ in range(len(y))], 'name': 'Setpoint'}]
layout = {'title': 'Mass-Spring-Damper System with PID Control', 'xaxis': {'title': 'Time'}, 'yaxis': {'title': 'Displacement'}}
window.Plotly.newPlot('pid-control', data, layout)
</script>
<p height="480" id="container" width="640"></p>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js" type="text/javascript"></script>
<script type="text/python">
from browser import document, window

# Set up the Three.js scene
container = document['container']
scene = window.THREE.Scene.new()
camera = window.THREE.PerspectiveCamera.new(75, 640 / 480, 0.1, 1000)
renderer = window.THREE.WebGLRenderer.new()
renderer.setSize(640, 480)
container <= renderer.domElement

# Create a cube
geometry = window.THREE.BoxGeometry.new(1, 1, 1)
material = window.THREE.MeshBasicMaterial.new({'color': 0x00ff00})
cube = window.THREE.Mesh.new(geometry, material)
scene.add(cube)

# Move the camera back so we can see the cube
camera.position.z = 5

# Define the animation loop
def animate(timestamp):
    # Rotate the cube
    cube.rotation.x += 0.01
    cube.rotation.y += 0.01
    
    # Render the scene
    renderer.render(scene, camera)
    
    # Request the next frame
    window.requestAnimationFrame(animate)

# Start the animation loop
window.requestAnimationFrame(animate)
</script>
<p height="480" id="container2" width="640"></p>
<script type="text/python">
from browser import document, window

# Set up the Three.js scene
container = document['container2']
scene = window.THREE.Scene.new()
camera = window.THREE.PerspectiveCamera.new(75, 640 /480, 0.1, 1000)
renderer = window.THREE.WebGLRenderer.new()
renderer.setSize(640, 480)
container <= renderer.domElement

# Create a cube
geometry = window.THREE.BoxGeometry.new(1, 1, 1)
material = window.THREE.MeshBasicMaterial.new({'color': 0x00ff00})
cube = window.THREE.Mesh.new(geometry, material)
scene.add(cube)

# Move the camera back so we can see the cube
camera.position.z = 5

# Set up a Raycaster for mouse interaction
raycaster = window.THREE.Raycaster.new()
mouse = window.THREE.Vector2.new()

# Define a function to handle mouse move events
def on_mouse_move(event):
    # Calculate the mouse position in normalized device coordinates
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1

# Register the mouse move event handler
document.bind('mousemove', on_mouse_move)

# Define the animation loop
def animate(timestamp):
    # Update the Raycaster with the current mouse position
    raycaster.setFromCamera(mouse, camera)
    
    # Check if the Raycaster intersects with the cube
    intersects = raycaster.intersectObject(cube)
    
    # Change the cube color if it is intersected
    if len(intersects) > 0:
        cube.material.color.set(0xff0000)
    else:
        cube.material.color.set(0x00ff00)
    
    # Rotate the cube
    cube.rotation.x += 0.01
    cube.rotation.y += 0.01
    
    # Render the scene
    renderer.render(scene, camera)
    
    # Request the next frame
    window.requestAnimationFrame(animate)

# Start the animation loop
window.requestAnimationFrame(animate)
</script>
<p>STL part viewer</p>
<p height="480" id="stl" width="640"></p>
<script type="text/python">
from browser import document, html

# Create a container for the STL viewer
stl_container = html.DIV(id="stl_cont")
stl = document["stl"]
stl <= stl_container

# Load the Stl Viewer Javascript Plugin
stl_viewer_script = html.SCRIPT(src="https://www.viewstl.com/plugin/stl_viewer.min.js")
stl <= stl_viewer_script

def init_stl_viewer():
    # Create a new instance of Stl Viewer
    stl_viewer = window.StlViewer.new(document.getElementById("stl_cont"), {"models": [{"id": 0, "filename": "/downloads/block100.stl"}]})

# Wait for the Stl Viewer Javascript Plugin to load before initializing the viewer
document.bind("readystatechange", lambda: init_stl_viewer() if document.readyState == "complete" else None)
</script>
<p>Using <a href="https://www.sciencedirect.com/science/article/pii/S0950705115005043">sine-cosine algorithm</a> to optimize with constraints in Brython:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython_stdlib"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython()"&gt;

&lt;div id="output"&gt;&lt;/div&gt;

&lt;script type="text/python"&gt;
from browser import document
from random import random, uniform
from math import sin, cos, pi

# Define the objective function
def objective_function(x):
    return x[0]**2 + x[1]**2

# Define the constraint functions
def constraint1(x):
    return x[0] + x[1] - 2

def constraint2(x):
    return 1 - x[0] - x[1]

# Define the penalty function
def penalty_function(x):
    penalty = 0
    if constraint1(x) &gt; 0:
        penalty += constraint1(x)
    if constraint2(x) &gt; 0:
        penalty += constraint2(x)
    return penalty

# Define the fitness function
def fitness_function(x):
    return objective_function(x) + penalty_function(x)

# Define the sine cosine algorithm
def sine_cosine_algorithm(fitness_function, dimension, lower_bound, upper_bound, population_size, max_iterations):
    # Initialize the population
    population = [[uniform(lower_bound, upper_bound) for _ in range(dimension)] for _ in range(population_size)]
    population_fitness = [fitness_function(individual) for individual in population]

    # Initialize the best solution
    best_solution = population[0]
    best_fitness = population_fitness[0]

    # Main loop of the algorithm
    for iteration in range(max_iterations):
        # Calculate the value of a and r1
        a = 2 - iteration * (2 / max_iterations)
        r1 = 2 * pi * random()

        # Update the population
        for i in range(population_size):
            # Calculate the value of r2, r3 and r4
            r2 = 2 * random()
            r3 = 2 * random()
            r4 = random()

            # Update the individual
            for j in range(dimension):
                if r4 &lt; 0.5:
                    population[i][j] += r1 * sin(r2) * abs(r3 * best_solution[j] - population[i][j])
                else:
                    population[i][j] += r1 * cos(r2) * abs(r3 * best_solution[j] - population[i][j])

                # Make sure the individual is within the bounds
                if population[i][j] &lt; lower_bound:
                    population[i][j] = lower_bound
                elif population[i][j] &gt; upper_bound:
                    population[i][j] = upper_bound

            # Calculate the fitness of the individual
            population_fitness[i] = fitness_function(population[i])

            # Update the best solution
            if population_fitness[i] &lt; best_fitness:
                best_solution = population[i]
                best_fitness = population_fitness[i]

        # Print the current iteration and best fitness
        print(f'Iteration: {iteration + 1}, Best Fitness: {best_fitness:.6f}')

    return best_solution

# Run the sine cosine algorithm to solve the optimization problem with constraints
best_solution = sine_cosine_algorithm(fitness_function, dimension=2, lower_bound=-10, upper_bound=10, population_size=50, max_iterations=100)

# Print the result
output_div = document['output']
output_div.text = f'Best Solution: {best_solution}'
&lt;/script&gt;

&lt;script src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p>Plot the result by using <a href="https://plotly.com/javascript/">plotly.js</a>:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython_stdlib"&gt;&lt;/script&gt;
    &lt;script src="https://cdn.plot.ly/plotly-latest.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython()"&gt;

&lt;div id="output"&gt;&lt;/div&gt;
&lt;div id="plot"&gt;&lt;/div&gt;

&lt;script type="text/python"&gt;
from browser import document
from random import random, uniform
from math import sin, cos, pi

# Define the objective function
def objective_function(x):
    return x[0]**2 + x[1]**2

# Define the constraint functions
def constraint1(x):
    return x[0] + x[1] - 2

def constraint2(x):
    return 1 - x[0] - x[1]

# Define the penalty function
def penalty_function(x):
    penalty = 0
    if constraint1(x) &gt; 0:
        penalty += constraint1(x)
    if constraint2(x) &gt; 0:
        penalty += constraint2(x)
    return penalty

# Define the fitness function
def fitness_function(x):
    return objective_function(x) + penalty_function(x)

# Define the sine cosine algorithm
def sine_cosine_algorithm(fitness_function, dimension, lower_bound, upper_bound, population_size, max_iterations):
    # Initialize the population
    population = [[uniform(lower_bound, upper_bound) for _ in range(dimension)] for _ in range(population_size)]
    population_fitness = [fitness_function(individual) for individual in population]

    # Initialize the best solution
    best_solution = population[0]
    best_fitness = population_fitness[0]

    # Main loop of the algorithm
    for iteration in range(max_iterations):
        # Calculate the value of a and r1
        a = 2 - iteration * (2 / max_iterations)
        r1 = 2 * pi * random()

        # Update the population
        for i in range(population_size):
            # Calculate the value of r2, r3 and r4
            r2 = 2 * random()
            r3 = 2 * random()
            r4 = random()

            # Update the individual
            for j in range(dimension):
                if r4 &lt; 0.5:
                    population[i][j] += r1 * sin(r2) * abs(r3 * best_solution[j] - population[i][j])
                else:
                    population[i][j] += r1 * cos(r2) * abs(r3 * best_solution[j] - population[i][j])

                # Make sure the individual is within the bounds
                if population[i][j] &lt; lower_bound:
                    population[i][j] = lower_bound
                elif population[i][j] &gt; upper_bound:
                    population[i][j] = upper_bound

            # Calculate the fitness of the individual
            population_fitness[i] = fitness_function(population[i])

            # Update the best solution
            if population_fitness[i] &lt; best_fitness:
                best_solution = population[i]
                best_fitness = population_fitness[i]

        # Print the current iteration and best fitness
        print(f'Iteration: {iteration + 1}, Best Fitness: {best_fitness:.6f}')

    return best_solution

# Run the sine cosine algorithm to solve the optimization problem with constraints
best_solution = sine_cosine_algorithm(fitness_function, dimension=2, lower_bound=-10, upper_bound=10, population_size=50, max_iterations=100)

# Print the result
output_div = document['output']
output_div.text = f'Best Solution: {best_solution}'

# Plot the result using Plotly.js
data = [
    {
        'x': [best_solution[0]],
        'y': [best_solution[1]],
        'mode': 'markers',
        'marker': {'size': 12},
        'name': 'Best Solution'
    }
]

layout = {
    'xaxis': {'range': [-10, 10]},
    'yaxis': {'range': [-10, 10]},
}

Plotly.newPlot('plot', data, layout)
&lt;/script&gt;

&lt;script src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p></p>